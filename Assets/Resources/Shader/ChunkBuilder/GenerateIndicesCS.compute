#pragma kernel CSMain

#include "SurfaceNets.cginc"
#include "MeshStructs.cginc"

#define THREAD_GROUP_SIZE_X 16
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1
#define MAX_BUFFERS 8

StructuredBuffer<ActiveCell> _ActiveCells;
StructuredBuffer<uint> _IndexCache;
StructuredBuffer<Args> _ArgsBuffer;

RWStructuredBuffer<Counts> _MeshCounts;
RWStructuredBuffer<uint3> _IndexBuffer;

uint _IndexBufferSize;
uint _IndexCacheSize;

float4 _DataSizes[MAX_BUFFERS];

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
        in uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
        in uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
        in uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount 
        in uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
    )
{
	uint id = _dispatchThreadID.x;

	// Counter copied from active cells buffer to args buffer.
	// From ChunkBuilderGPU.cs: ComputeBuffer.CopyCount(ActiveCells, ArgsBuffer, 0);
	uint activeCellCount = _ArgsBuffer[0].indexCountPerInstance; 

    if (id >= activeCellCount)
	{
		return;
	}

	ActiveCell activeCell = _ActiveCells[id];
	uint mask = activeCell.mask;

	if (mask == 0 || mask == 0xff)
	{
		return;
	}

	uint chunkId = activeCell.chunkId;
	uint dataSize = _DataSizes[chunkId].x;
	
	uint indexCacheOffset = chunkId * _IndexCacheSize;
	uint indexOffset = chunkId * _IndexBufferSize;

	int R[3] = { 1, dataSize + 1, (dataSize + 1) * (dataSize + 1) };

	uint3 cellPos = FI3V(activeCell.cellId, dataSize, dataSize);
	uint m = GetM(cellPos, dataSize);

	uint edgeMask = EDGE_TABLE[mask];
	uint v0, v1, v2, v3;
	int currentIndexCount;

	v0 = _IndexCache[indexCacheOffset + m];

	[unroll]
	for (uint i = 0; i < 3; i++)
	{
		if ((edgeMask & (1 << i)) == 0)
		{
			continue;
		}

		uint iu = (i + 1) % 3;
		uint iv = (i + 2) % 3;

		if (cellPos[iu] == 0 || cellPos[iv] == 0)
		{
			continue;
		}

		int du = R[iu];
		int dv = R[iv];

		v1 = _IndexCache[indexCacheOffset + (m - du)];
		v2 = _IndexCache[indexCacheOffset + (m - dv)];
		v3 = _IndexCache[indexCacheOffset + (m - du - dv)];

		InterlockedAdd(_MeshCounts[chunkId].indexCount, 2, currentIndexCount);

		if ((mask & 1) > 0)
		{
			_IndexBuffer[indexOffset + currentIndexCount] = uint3(v0, v3, v1);
			_IndexBuffer[indexOffset + currentIndexCount + 1] = uint3(v0, v2, v3);
		}
		else
		{
			_IndexBuffer[indexOffset + currentIndexCount] = uint3(v0, v3, v2);
			_IndexBuffer[indexOffset + currentIndexCount + 1] = uint3(v0, v1, v3);
		}
	}
}
