#pragma kernel CSMain

#include "SurfaceNets.cginc"
#include "MeshStructs.cginc"

#define THREAD_GROUP_SIZE_X 33
#define THREAD_GROUP_SIZE_Y 9
#define THREAD_GROUP_SIZE_Z 1
#define MAX_BUFFERS 8

StructuredBuffer<float> _SignedDistanceField;

RWStructuredBuffer<Counts> _MeshCounts;
RWStructuredBuffer<ActiveCell> _ActiveCells;
RWStructuredBuffer<uint> _IndexCache;
RWStructuredBuffer<float3> _VertexBuffer;

uint _VolumeBufferSize;
uint _VertexBufferSize;
uint _IndexCacheSize;

float4 _NodeKeys[MAX_BUFFERS];
float4 _DataSizes[MAX_BUFFERS];

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (uint3 gtid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
	uint chunkId = gid.x;
	uint dataSize = _DataSizes[chunkId].x;
	uint chunkSize = dataSize - 1;
	uint3 cellPos = uint3(gtid.x, gid.y * THREAD_GROUP_SIZE_Y + gtid.y, gid.z);

    if (IsUpperBoundary(cellPos, chunkSize))
	{
		 return;
	}
	
	uint volumeOffset = chunkId * _VolumeBufferSize;
	uint vertexOffset = chunkId * _VertexBufferSize;
	uint indexCacheOffset = chunkId * _IndexCacheSize;

	float4 key = _NodeKeys[chunkId];
	float cellSize = key.w;

    uint i, j, k;
	uint2 e;
	uint3 vi;
	float d;
	float3 p;
	float grid[8];
	uint mask = 0;
	
	[unroll]
	for (i = 0; i < 8; i++)
	{
		vi = CUBE_VERTS[i] + cellPos;
		d = _SignedDistanceField[volumeOffset + FI3(vi, dataSize, dataSize)];
		grid[i] = d;
		mask |= ((d > 0) ? (1 << i) : 0);
	}

	if (mask == 0 || mask == 0xff)
	{
		return;
	}

	uint edgeMask = EDGE_TABLE[mask];
	uint edgeCount = 0;

	float3 position = 0;
	float v[3];

	[unroll]
	for (i = 0; i < 12; i++)
	{
		if ((edgeMask & (1 << i)) == 0)
		{
			continue;
		}

		e[0] = CUBE_EDGES[i << 1];
		e[1] = CUBE_EDGES[(i << 1) + 1];

		float g0 = grid[e[0]];
		float g1 = grid[e[1]];
		float t = g0 - g1;

		if (abs(t) > 1e-6)
		{
			t = g0 / t;
		}
		else
		{
			continue;
		}

		[unroll]
		for (j = 0, k = 1; j < 3; j++, k <<= 1)
		{
			uint a = e[0] & k;
			uint b = e[1] & k;

			if (a != b)
			{
				v[j] = ((a > 0) ? 1.0 - t : t);
			}
			else
			{
				v[j] = ((a > 0) ? 1.0 : 0);
			}
		}

		p = cellPos + float3(v[0], v[1], v[2]);
		position += p;
		edgeCount++;
	}

	if (edgeCount == 0)
	{
		return;
	}

	float s = 1.0 / edgeCount;
	position = (s * position) * cellSize;

	uint cellId = FI3(cellPos, dataSize, dataSize);
	ActiveCell activeCell = {mask, cellId, chunkId};
	_ActiveCells[_ActiveCells.IncrementCounter()] = activeCell;

	uint index;
	InterlockedAdd(_MeshCounts[chunkId].vertexCount, 1, index);
	
	_VertexBuffer[vertexOffset + index] = position;

	uint m = GetM(cellPos, dataSize);
	_IndexCache[indexCacheOffset + m] = index;
}
