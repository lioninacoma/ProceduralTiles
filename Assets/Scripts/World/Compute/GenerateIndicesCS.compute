#pragma kernel CSMain

#include "SurfaceNets.cginc"
#include "MeshStructs.cginc"

#define THREAD_GROUP_SIZE_X 16
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

StructuredBuffer<ActiveCell> _ActiveCells;
StructuredBuffer<uint> _IndexCache;

RWStructuredBuffer<Counts> _MeshCounts;
RWStructuredBuffer<uint3> _IndexBuffer;

uint _DataSize;
uint _ActiveCellCount;

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
        in uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
        in uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
        in uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount 
        in uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
    )
{
	uint id = _dispatchThreadID.x;
    if (id >= _ActiveCellCount)
	{
		return;
	}

	ActiveCell activeCell = _ActiveCells[id];
	uint mask = activeCell.mask;

	if (mask == 0 || mask == 0xff)
	{
		return;
	}

	int R[3] = { 1, _DataSize + 1, (_DataSize + 1) * (_DataSize + 1) };

	uint3 cellPos = FI3V(activeCell.cellId, _DataSize, _DataSize);
	uint m = GetM(cellPos, _DataSize);

	uint edgeMask = EDGE_TABLE[mask];
	uint v0, v1, v2, v3;
	int currentIndexCount;

	v0 = _IndexCache[m];

	for (uint i = 0; i < 3; i++)
	{
		if ((edgeMask & (1 << i)) == 0)
		{
			continue;
		}

		uint iu = (i + 1) % 3;
		uint iv = (i + 2) % 3;

		if (cellPos[iu] == 0 || cellPos[iv] == 0)
		{
			continue;
		}

		int du = R[iu];
		int dv = R[iv];

		v1 = _IndexCache[m - du];
		v2 = _IndexCache[m - dv];
		v3 = _IndexCache[m - du - dv];

		InterlockedAdd(_MeshCounts[0].indexCount, 2, currentIndexCount);

		if ((mask & 1) > 0)
		{
			_IndexBuffer[currentIndexCount] = uint3(v0, v3, v1);
			_IndexBuffer[currentIndexCount + 1] = uint3(v0, v2, v3);
		}
		else
		{
			_IndexBuffer[currentIndexCount] = uint3(v0, v3, v2);
			_IndexBuffer[currentIndexCount + 1] = uint3(v0, v1, v3);
		}
	}
}
